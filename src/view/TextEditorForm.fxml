<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Menu?>
<?import javafx.scene.control.MenuBar?>
<?import javafx.scene.control.MenuItem?>
<?import javafx.scene.control.SeparatorMenuItem?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.control.ToolBar?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>

<AnchorPane prefHeight="600.0" prefWidth="1000.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="controller.TextEditorFormController">
   <children>
      <MenuBar layoutY="8.0" style="-fx-background-color: #28AAB5;" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
        <menus>
          <Menu mnemonicParsing="false" text="File">
            <items>
              <MenuItem mnemonicParsing="false" onAction="#mnuItemNew_OnAction" text="New" />
                  <MenuItem mnemonicParsing="false" onAction="#mnuFileOpen_OnAction" text="Open" />
                  <MenuItem mnemonicParsing="false" onAction="#mnuSave_OnAction" text="Save" />
                  <MenuItem mnemonicParsing="false" onAction="#mnuSaveAs_OnAction" text="Save As" />
                  <MenuItem mnemonicParsing="false" onAction="#mnuPageSetup_OnAction" text="Page Setup" />
                  <MenuItem mnemonicParsing="false" onAction="#mnuPrint_OnAction" text="Print" />
                  <SeparatorMenuItem mnemonicParsing="false" />
                  <MenuItem mnemonicParsing="false" onAction="#mnuItemQuit_OnAction" text="Quit" />
            </items>
          </Menu>
          <Menu mnemonicParsing="false" text="Edit">
            <items>
              <MenuItem mnemonicParsing="false" text="Cut" />
                  <MenuItem mnemonicParsing="false" text="Copy" />
                  <MenuItem mnemonicParsing="false" text="Paste" />
                  <SeparatorMenuItem mnemonicParsing="false" />
                  <MenuItem mnemonicParsing="false" onAction="#mnuItemFind_OnAction" text="Find" />
                  <MenuItem mnemonicParsing="false" onAction="#mnuItemReplace_OnAction" text="Repalce" />
                  <SeparatorMenuItem mnemonicParsing="false" />
                  <MenuItem mnemonicParsing="false" onAction="#mnuItemSelectAll_OnAction" text="Select All" />
            </items>
          </Menu>
          <Menu mnemonicParsing="false" text="Help">
            <items>
              <MenuItem mnemonicParsing="false" text="About" />
            </items>
          </Menu>
        </menus>
      </MenuBar>
      <TextArea fx:id="txtEditor" layoutX="14.0" layoutY="37.0" prefHeight="526.0" prefWidth="990.0" text="A regular expression (shortened as regex or regexp;[1] also referred to as rational expression[2][3]) is a sequence of characters that specifies a search pattern. Usually such patterns are used by string-searching algorithms for &quot;find&quot; or &quot;find and replace&quot; operations on strings, or for input validation. It is a technique developed in theoretical computer science and formal language theory.&#10;&#10;The concept arose in the 1950s when the American mathematician Stephen Cole Kleene formalized the description of a regular language. The concept came into common use with Unix text-processing utilities. Different syntaxes for writing regular expressions have existed since the 1980s, one being the POSIX standard and another, widely used, being the Perl syntax.&#10;&#10;Regular expressions are used in search engines, search and replace dialogs of word processors and text editors, in text processing utilities such as sed and AWK and in lexical analysis. Many programming languages provide regex capabilities either built-in or via libraries, as it has uses in many situations.&#10;&#10;Patterns&#10;The phrase regular expressions, or regexes, is often used to mean the specific, standard textual syntax for representing patterns for matching text, as distinct from the mathematical notation described below. Each character in a regular expression (that is, each character in the string describing its pattern) is either a metacharacter, having a special meaning, or a regular character that has a literal meaning. For example, in the regex b., 'b' is a literal character that matches just 'b', while '.' is a metacharacter that matches every character except a newline. Therefore, this regex matches, for example, 'b%', or 'bx', or 'b5'. Together, metacharacters and literal characters can be used to identify text of a given pattern or process a number of instances of it. Pattern matches may vary from a precise equality to a very general similarity, as controlled by the metacharacters. For example, . is a very general pattern, [a-z] (match all lower case letters from 'a' to 'z') is less general and b is a precise pattern (matches just 'b'). The metacharacter syntax is designed specifically to represent prescribed targets in a concise and flexible way to direct the automation of text processing of a variety of input data, in a form easy to type using a standard ASCII keyboard.&#10;&#10;A very simple case of a regular expression in this syntax is to locate a word spelled two different ways in a text editor, the regular expression seriali[sz]e matches both &quot;serialise&quot; and &quot;serialize&quot;. Wildcard characters also achieve this, but are more limited in what they can pattern, as they have fewer metacharacters and a simple language-base.&#10;&#10;The usual context of wildcard characters is in globbing similar names in a list of files, whereas regexes are usually employed in applications that pattern-match text strings in general. For example, the regex ^[ \t]+|[ \t]+$ matches excess whitespace at the beginning or end of a line. An advanced regular expression that matches any numeral is [+-]?(\d+(\.\d+)?|\.\d+)([eE][+-]?\d+)?." wrapText="true" AnchorPane.bottomAnchor="35.0" AnchorPane.leftAnchor="5.0" AnchorPane.rightAnchor="5.0" AnchorPane.topAnchor="35.0" />
      <ToolBar layoutX="25.0" layoutY="526.0" prefHeight="33.0" prefWidth="990.0" style="-fx-background-color: #28AAB5;" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" />
      <AnchorPane fx:id="pneFind" layoutX="789.0" opacity="0.95" prefHeight="46.0" prefWidth="330.0" style="-fx-background-color: #CDF4EA;" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
         <children>
            <TextField fx:id="txtSearch" layoutX="14.0" layoutY="10.0" prefHeight="25.0" prefWidth="210.0" AnchorPane.bottomAnchor="10.0" AnchorPane.leftAnchor="10.0" AnchorPane.rightAnchor="110.0" AnchorPane.topAnchor="10.0" />
            <Button layoutX="232.0" layoutY="10.0" mnemonicParsing="false" onAction="#btnFindNext_OnAction" prefHeight="25.0" prefWidth="40.0" style="-fx-background-color: #28AAB5;" text="﹀" textFill="#2f0404" AnchorPane.bottomAnchor="10.0" AnchorPane.rightAnchor="58.0" AnchorPane.topAnchor="10.0">
               <font>
                  <Font name="System Bold" size="13.0" />
               </font>
            </Button>
            <Button layoutX="281.0" layoutY="10.0" mnemonicParsing="false" onAction="#btnFindPrevious_OnAction" prefHeight="25.0" prefWidth="40.0" style="-fx-background-color: #28AAB5;" text="︿" AnchorPane.bottomAnchor="10.0" AnchorPane.rightAnchor="10.0" AnchorPane.topAnchor="10.0">
               <font>
                  <Font name="System Bold" size="13.0" />
               </font>
            </Button>
         </children>
      </AnchorPane>
      <AnchorPane fx:id="pneReplace" layoutX="779.0" layoutY="6.0" opacity="0.95" prefHeight="81.0" prefWidth="330.0" style="-fx-background-color: #CDF4EA;" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
         <children>
            <TextField fx:id="txtSearch1" layoutX="14.0" layoutY="10.0" prefHeight="25.0" prefWidth="210.0" AnchorPane.bottomAnchor="45.0" AnchorPane.leftAnchor="10.0" AnchorPane.rightAnchor="110.0" AnchorPane.topAnchor="10.0" />
            <Button alignment="CENTER" contentDisplay="CENTER" layoutX="232.0" layoutY="10.0" mnemonicParsing="false" onAction="#btnFindNext_OnAction" prefHeight="25.0" prefWidth="40.0" style="-fx-background-color: #28AAB5;" text="﹀" textAlignment="CENTER" textFill="#2f0404" AnchorPane.bottomAnchor="45.0" AnchorPane.rightAnchor="58.0" AnchorPane.topAnchor="10.0">
               <font>
                  <Font name="System Bold" size="13.0" />
               </font>
            </Button>
            <Button alignment="CENTER" layoutX="281.0" layoutY="10.0" mnemonicParsing="false" onAction="#btnFindPrevious_OnAction" prefHeight="25.0" prefWidth="40.0" style="-fx-background-color: #28AAB5;" text="︿" textAlignment="CENTER" AnchorPane.bottomAnchor="45.0" AnchorPane.rightAnchor="10.0" AnchorPane.topAnchor="10.0">
               <font>
                  <Font name="System Bold" size="13.0" />
               </font>
            </Button>
            <TextField fx:id="txtReplace" layoutX="10.0" layoutY="45.0" prefHeight="25.0" prefWidth="210.0" AnchorPane.bottomAnchor="10.0" AnchorPane.leftAnchor="10.0" AnchorPane.rightAnchor="110.0" AnchorPane.topAnchor="45.0" />
            <Button layoutX="232.0" layoutY="44.0" mnemonicParsing="false" onAction="#btnReplace_OnAction" prefHeight="25.0" prefWidth="40.0" style="-fx-background-color: #28AAB5;" text="R" textFill="#2f0404" AnchorPane.bottomAnchor="10.0" AnchorPane.rightAnchor="58.0">
               <font>
                  <Font name="System Bold" size="13.0" />
               </font>
            </Button>
            <Button layoutX="281.0" layoutY="44.0" mnemonicParsing="false" onAction="#btnReplaceAll_OnAction" prefHeight="25.0" prefWidth="40.0" style="-fx-background-color: #28AAB5;" text="RA" textFill="#2f0404" AnchorPane.bottomAnchor="10.0" AnchorPane.rightAnchor="10.0">
               <font>
                  <Font name="System Bold" size="13.0" />
               </font>
            </Button>
         </children>
      </AnchorPane>
   </children>
</AnchorPane>
